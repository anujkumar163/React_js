@Test
void patternSchedulerWaitsForAuthManagerInitialization() throws InterruptedException {
    ReflectionTestUtils.setField(autocompleteScheduler, "useAutocomplete", "Y");
    AuthManager.getInstance().setInitializeCompleted(false);
    Thread t = new Thread(() -> {
        try {
            Thread.sleep(5000);
            AuthManager.getInstance().setInitializeCompleted(true);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    });
    t.start();
    autocompleteScheduler.patternScheduler();
    verify(autoCompleteService, times(1)).batchCreatePatternDataList(any());
}

@Test
void patternSchedulerWithDataSourceAndTenant() {
    // Mock the TenantDataSourceManager
    TenantDataSourceManager tenantDataSourceManager = mock(TenantDataSourceManager.class);
    when(tenantDataSourceManager.getDataSourceMap()).thenReturn(Map.of(
        ApiServerEnum.ADMIN_PORTAL_SERVER.getIntValue(), Map.of(
            "datasource1", new DataSource("tenant1"),
            "datasource2", new DataSource("tenant2")
        )
    ));
    ReflectionTestUtils.setField(autocompleteScheduler, "tenantDataSourceManager", tenantDataSourceManager);

    // Mock the AutoCompleteService
    doNothing().when(autoCompleteService).batchCreatePatternDataList(any());

    // Call the method to be tested
    autocompleteScheduler.patternScheduler();

    // Verify that the batchCreatePatternDataList method was called for each tenant
    verify(autoCompleteService, times(2)).batchCreatePatternDataList(any());
}






@Test
public void testAutocompleteScheduler() throws Exception {
    // Create mock dependencies
    TenantDataSourceManager tenantDataSourceManagerMock = mock(TenantDataSourceManager.class);
    AutoCompleteService autoCompleteServiceMock = mock(AutoCompleteService.class);
    
    // Create test data
    int adminPortalServerId = ApiServerEnum.ADMIN_PORTAL_SERVER.getIntValue();
    Map<Integer, DataSource> dataSourceMap = new HashMap<>();
    DataSource dataSource = new DataSource("testTenantId", "testUrl", "testUsername", "testPassword");
    dataSourceMap.put(adminPortalServerId, dataSource);
    
    // Stub the method calls for the dependencies
    when(tenantDataSourceManagerMock.getDataSourceMap()).thenReturn(dataSourceMap);
    doNothing().when(autoCompleteServiceMock).batchCreatePatternDataList(eq("testTenantId"));
    
    // Create the scheduler and set the dependencies
    AutocompleteScheduler scheduler = new AutocompleteScheduler();
    scheduler.autoCompleteService = autoCompleteServiceMock;
    TenantDataSourceManager.setInstance(tenantDataSourceManagerMock);
    
    // Call the method to be tested
    scheduler.patternScheduler();
    
    // Verify that the method calls were made correctly
    verify(tenantDataSourceManagerMock).getDataSourceMap();
    verify(autoCompleteServiceMock).batchCreatePatternDataList("testTenantId");
}
