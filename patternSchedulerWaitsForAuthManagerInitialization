@Test
void patternSchedulerWaitsForAuthManagerInitialization() throws InterruptedException {
    ReflectionTestUtils.setField(autocompleteScheduler, "useAutocomplete", "Y");
    AuthManager.getInstance().setInitializeCompleted(false);
    Thread t = new Thread(() -> {
        try {
            Thread.sleep(5000);
            AuthManager.getInstance().setInitializeCompleted(true);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    });
    t.start();
    autocompleteScheduler.patternScheduler();
    verify(autoCompleteService, times(1)).batchCreatePatternDataList(any());
}

@Test
void patternSchedulerWithDataSourceAndTenant() {
    // Mock the TenantDataSourceManager
    TenantDataSourceManager tenantDataSourceManager = mock(TenantDataSourceManager.class);
    when(tenantDataSourceManager.getDataSourceMap()).thenReturn(Map.of(
        ApiServerEnum.ADMIN_PORTAL_SERVER.getIntValue(), Map.of(
            "datasource1", new DataSource("tenant1"),
            "datasource2", new DataSource("tenant2")
        )
    ));
    ReflectionTestUtils.setField(autocompleteScheduler, "tenantDataSourceManager", tenantDataSourceManager);

    // Mock the AutoCompleteService
    doNothing().when(autoCompleteService).batchCreatePatternDataList(any());

    // Call the method to be tested
    autocompleteScheduler.patternScheduler();

    // Verify that the batchCreatePatternDataList method was called for each tenant
    verify(autoCompleteService, times(2)).batchCreatePatternDataList(any());
}

//third method for optional
@Test
void patternSchedulerBatchCall() throws InterruptedException {
    // Create a sample DataSource object
    DataSource dataSource = new DataSource();
    dataSource.setTenantId("sample_tenant_id");

    // Create a sample map with the DataSource object
    Map<String, DataSource> map = new HashMap<>();
    map.put("sample_key", dataSource);

    // Mock the TenantDataSourceManager to return the sample map
    TenantDataSourceManager tenantDataSourceManager = mock(TenantDataSourceManager.class);
    when(tenantDataSourceManager.getDataSourceMap()).thenReturn(Collections.singletonMap(ApiServerEnum.ADMIN_PORTAL_SERVER.getIntValue(), map));

    // Set the TenantDataSourceManager instance to the AutocompleteScheduler class
    ReflectionTestUtils.setField(autocompleteScheduler, "tenantDataSourceManager", tenantDataSourceManager);

    // Set the useAutocomplete field to "Y"
    ReflectionTestUtils.setField(autocompleteScheduler, "useAutocomplete", "Y");

    // Mock the AuthManager to return that initialization has completed
    AuthManager authManager = mock(AuthManager.class);
    when(authManager.isInitializeCompleted()).thenReturn(true);
    ReflectionTestUtils.setField(AuthManager.class, "instance", authManager);

    // Call the patternSchedulerBatchCall method
    autocompleteScheduler.patternSchedulerBatchCall();

    // Verify that the batchCreatePatternDataList method of the AutoCompleteService was called with the correct arguments
    verify(autoCompleteService, times(1)).batchCreatePatternDataList("sample_tenant_id");
}





@Test
public void testAutocompleteScheduler() throws Exception {
    // Create mock dependencies
    TenantDataSourceManager tenantDataSourceManagerMock = mock(TenantDataSourceManager.class);
    AutoCompleteService autoCompleteServiceMock = mock(AutoCompleteService.class);
    
    // Create test data
    int adminPortalServerId = ApiServerEnum.ADMIN_PORTAL_SERVER.getIntValue();
    Map<Integer, DataSource> dataSourceMap = new HashMap<>();
    DataSource dataSource = new DataSource("testTenantId", "testUrl", "testUsername", "testPassword");
    dataSourceMap.put(adminPortalServerId, dataSource);
    
    // Stub the method calls for the dependencies
    when(tenantDataSourceManagerMock.getDataSourceMap()).thenReturn(dataSourceMap);
    doNothing().when(autoCompleteServiceMock).batchCreatePatternDataList(eq("testTenantId"));
    
    // Create the scheduler and set the dependencies
    AutocompleteScheduler scheduler = new AutocompleteScheduler();
    scheduler.autoCompleteService = autoCompleteServiceMock;
    TenantDataSourceManager.setInstance(tenantDataSourceManagerMock);
    
    // Call the method to be tested
    scheduler.patternScheduler();
    
    // Verify that the method calls were made correctly
    verify(tenantDataSourceManagerMock).getDataSourceMap();
    verify(autoCompleteServiceMock).batchCreatePatternDataList("testTenantId");
}



full code to test

package com.sds.rpa.asset.application.job;

import com.sds.rpa.asset.autocomplete.service.AutoCompleteService;
import com.sds.rpa.common.constants.ApiServerEnum;
import com.sds.rpa.common.database.config.TenantContext;
import com.sds.rpa.common.tenant.manager.TenantDataSourceManager;
import com.sds.rpa.lib.auth.manager.AuthManager;
import net.javacrumbs.shedlock.core.SchedulerLock;
import net.javacrumbs.shedlock.spring.annotation.EnableSchedulerLock;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.slf4j.Logger;
import org.springframework.scheduling.annotation.Scheduled;

import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class AutocompleteSchedulerTest {

    @Mock
    private AutoCompleteService autoCompleteService;

    @Mock
    private Logger logger;

    @InjectMocks
    private AutocompleteScheduler autocompleteScheduler;

    @Before
    public void initMocks() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testPatternScheduler_whenUseAutocompleteIsN_shouldNotCallService() throws Exception {
        autocompleteScheduler.useAutocomplete = "N";

        autocompleteScheduler.patternScheduler();

        verify(autoCompleteService, never()).batchCreatePatternDataList(anyString());
    }

    @Test
    public void testPatternScheduler_whenUseAutocompleteIsY_shouldCallService() throws Exception {
        autocompleteScheduler.useAutocomplete = "Y";

        autocompleteScheduler.patternScheduler();

        verify(autoCompleteService, atLeastOnce()).batchCreatePatternDataList(anyString());
    }

    @Test
    public void testPatternScheduler_whenTenantExists_shouldCallServiceForEachTenant() throws Exception {
        autocompleteScheduler.useAutocomplete = "Y";

        String tenant1 = "tenant1";
        String tenant2 = "tenant2";

        Map<String, TenantDataSourceManager.DataSourceInfo> dataSourceMap = new HashMap<>();
        dataSourceMap.put("1", new TenantDataSourceManager.DataSourceInfo("1", tenant1));
        dataSourceMap.put("2", new TenantDataSourceManager.DataSourceInfo("2", tenant2));
        TenantDataSourceManager.getInstance().setDataSourceMap(ApiServerEnum.ADMIN_PORTAL_SERVER.getIntValue(), dataSourceMap);

        autocompleteScheduler.patternScheduler();

        verify(autoCompleteService, times(1)).batchCreatePatternDataList(tenant1);
        verify(autoCompleteService, times(1)).batchCreatePatternDataList(tenant2);
    }

    @Test
    public void testPatternScheduler_whenTenantNotExists_shouldNotCallService() throws Exception {
        autocompleteScheduler.useAutocomplete = "Y";

        TenantDataSourceManager.getInstance().setDataSourceMap(ApiServerEnum.ADMIN_PORTAL_SERVER.getIntValue(), null);

        autocompleteScheduler.patternScheduler();

        verify(autoCompleteService, never()).batchCreatePatternDataList(anyString());
    }

    @Test
    public void testPatternScheduler_whenAuthManagerNotInitialized_shouldRetry() throws Exception {
        autocompleteScheduler.useAutocomplete = "Y";

        when(AuthManager.getInstance().isInitializeCompleted()).thenReturn(false).thenReturn(false).thenReturn(true);

        autocompleteScheduler.patternScheduler();

        verify(AuthManager.getInstance(), times(3)).isInitializeCompleted();
        verify(autoCompleteService, atLeastOnce()).batchCreatePatternDataList(anyString());
    }

    @Test



//test 5

 @Test
    public void testPatternScheduler() throws InterruptedException {
        MockitoAnnotations.openMocks(this);
        AutocompleteScheduler autocompleteScheduler = new AutocompleteScheduler();
        autocompleteScheduler.autoCompleteService = autoCompleteService;
        autocompleteScheduler.logger = logger;
        autocompleteScheduler.useAutocomplete = "Y";
        autocompleteScheduler.tenantDataSourceManager = tenantDataSourceManager;
        autocompleteScheduler.authManager = authManager;
        autocompleteScheduler.patternScheduler();

        verify(autoCompleteService, times(1)).batchCreatePatternDataList(anyString());
        verify(logger, times(2)).debug(anyString(), any(Timestamp.class));
    }





