@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String email;
    
    private String mobile;
    
    private String password;
    
    // getters and setters
}


----------------

public interface UserRepository extends JpaRepository<User, Long> {
    User findByEmail(String email);
    
    User findByMobile(String mobile);
}
----------------------
@Service
public class UserService {
    private final UserRepository userRepository;
    private final JavaMailSender mailSender;
    
    @Autowired
    public UserService(UserRepository userRepository, JavaMailSender mailSender) {
        this.userRepository = userRepository;
        this.mailSender = mailSender;
    }
    
    public void sendOTP(String email, String mobile) {
        User user = userRepository.findByEmail(email);
        if (user != null && user.getMobile().equals(mobile)) {
            // Generate and send OTP (one-time password) via email and mobile
            String otp = generateOTP();
            
            // Send email with the OTP
            SimpleMailMessage message = new SimpleMailMessage();
            message.setTo(user.getEmail());
            message.setSubject("Reset Password OTP");
            message.setText("Your OTP is: " + otp);
            mailSender.send(message);
            
            // Send OTP via SMS to the user's mobile (you can use an SMS service here)
            // ...
        } else {
            throw new IllegalArgumentException("Invalid email or mobile number.");
        }
    }
    
    public void resetPassword(String email, String otp, String newPassword) {
        User user = userRepository.findByEmail(email);
        if (user != null && user.getOtp().equals(otp)) {
            // Update user's password
            user.setPassword(newPassword);
            userRepository.save(user);
        } else {
            throw new IllegalArgumentException("Invalid OTP.");
        }
    }
    
    private String generateOTP() {
        // Generate and return a random OTP
        // ...
    }
}

--------------------------

@RestController
@RequestMapping("/api/users")
public class UserController {
    private final UserService userService;
    
    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }
    
    @PostMapping("/forgot-password")
    public void forgotPassword(@RequestParam String email, @RequestParam String mobile) {
        userService.sendOTP(email, mobile);
    }
    
    @PostMapping("/reset-password")
    public void resetPassword(@RequestParam String email, @RequestParam String otp, @RequestParam String newPassword) {
        userService.resetPassword(email, otp, newPassword);
    }
}
-----------------------

<form action="/api/users/forgot-password" method="post">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    
    <label for="mobile">Mobile Number:</label>
    <input type="text" id="mobile" name="mobile" required>
    
    <button type="submit">Send OTP</button>
</form>

<form action="/api/users/reset-password" method="post">
    <label for="otp">OTP:</label>
    <input type="text" id="otp" name="otp" required>
    
    <label for="newPassword">New Password:</label>
    <input type="password" id="newPassword" name="newPassword" required>
    
    <button type="submit">Reset Password</button>
</form>

-----------------private String generateOTP() {
    int otpLength = 6; // Length of the OTP
    String numbers = "0123456789"; // Characters used for generating OTP
    Random random = new Random();
    StringBuilder otp = new StringBuilder();

    for (int i = 0; i < otpLength; i++) {
        int index = random.nextInt(numbers.length());
        otp.append(numbers.charAt(index));
    }

    return otp.toString();
}
----------------------










