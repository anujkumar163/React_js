----------------------------class to test first---------------------------------------------------------

public ResponseEntity<Map<String, String>> loginProvision(ApLoginRequest apLoginRequest) throws Exception {
		try {
			ApUtil util = new ApUtil();
			util.validateLogin(apLoginRequest);
		} catch (Exception e) {
			throw new RuntimeException("Processing Error " + e.getMessage());
		}
		return loginAdmin(apLoginRequest);
	}
  -----------------------------------------------------answer---------------------------------------------------
  class TodayTest {
    /**
     * Method under test: {@link Today#loginProvision(ApLoginRequest)}
     */
    @Test
    void testLoginProvision() throws Exception {
        Today today = new Today();
        //today class ka name ha kiske ander loginProvision method ha
        ApLoginRequest apLoginRequest = new ApLoginRequest();
        apLoginRequest.setTenantId("42");
        apLoginRequest.setUserId("42");
        apLoginRequest.setUserName("janedoe");
        assertNull(today.loginProvision(apLoginRequest));
        assertEquals("42", apLoginRequest.getTenantId());
    }
}
----------------------------------_____------------------___________------------------______________-----------------

processService

public void testChangeOwner_nullObjectId() {
    // arrange
    String userId = "user123";
    String ownerId = "owner123";

    // act
    changeOwner(null, userId, ownerId);
}


processService two

@Test
public void testChangeOwner_exceptions() {
    // arrange
    String objectId = "object123";
    String userId = "user123";
    String ownerId = "owner123";
    List<TbCommonObject> list = new ArrayList<>();
    TbCommonObject tbCommonObject = new TbCommonObject();
    TbObjectType tbObjectType = new TbObjectType();
    tbObjectType.setObjectTypeId(ObjectTypeEnum.PROPERTY.getTypeId());
    tbCommonObject.setTbObjectType(tbObjectType);
    tbCommonObject.setOwnerId(userId);
    list.add(tbCommonObject);
    when(objectRepository.inquiryObjectList(objectId)).thenReturn(list);
    when(authService.isAdmin(userId)).thenReturn(true);

    // act and assert
    assertThrows(RPAServiceException.class, () -> {
        processService.changeOwner(null, userId, ownerId);
    });

    assertThrows(RPAServiceException.class, () -> {
        processService.changeOwner(objectId, null, ownerId);
    });

    assertThrows(RPAServiceException.class, () -> {
        processService.changeOwner(objectId, userId, null);
    });

    when(objectRepository.inquiryObjectList(objectId)).thenReturn(null);
    assertThrows(RPAServiceException.class, () -> {
        processService.changeOwner(objectId, userId, ownerId);
    });

    when(objectRepository.inquiryObjectList(objectId)).thenReturn(new ArrayList<TbCommonObject>());
    assertThrows(RPAServiceException.class, () -> {
        processService.changeOwner(objectId, userId, ownerId);
    });

    TbCommonObject process = new TbCommonObject();
    process.setTbObjectType(ObjectTypeEnum.PROCESS.toTbObjectType());
    process.setOwnerId(userId);
    list.clear();
    list.add(process);
    when(objectRepository.inquiryObjectList(objectId)).thenReturn(list);
    when(authService.isAdmin(userId)).thenReturn(false);
    assertThrows(RPAServiceException.class, () -> {
        processService.changeOwner(objectId, userId, ownerId);
    });

    process.setTbObjectType(ObjectTypeEnum.PROPERTY.toTbObjectType());
    assertThrows(RPAServiceException.class, () -> {
        processService.changeOwner(objectId, userId, ownerId);
    });
}
-------------------------------------------------------
