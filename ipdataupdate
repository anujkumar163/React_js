class ipDataUpdate

 @Test
    void testSaveDocument(@TempDir Path tempDir) throws TransformerException, IOException, ParserConfigurationException {
        DocumentBuilder documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        Document document = documentBuilder.newDocument();
        Element element = document.createElement("test");

        // Create a temporary file in the temporary directory
        File xmlFile = tempDir.resolve("test.xml").toFile();

        assertTrue(saveDocument(element, xmlFile));
        assertTrue(Files.exists(xmlFile.toPath()));
        assertFalse(saveDocument(null, xmlFile));
        assertFalse(saveDocument(element, null));
        assertFalse(saveDocument(element, new File("nonexistent")));
    }
}


Second try


    @Test
    void testSaveDocument() throws TransformerException, ParserConfigurationException {
        DocumentBuilder documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        Document document = documentBuilder.newDocument();
        Element element = document.createElement("test");
        File xmlFile = new File("test.xml");

        assertFalse(saveDocument(null, xmlFile));
        assertFalse(saveDocument(element, null));
        assertFalse(saveDocument(element, new File("nonexistent")));
        assertTrue(saveDocument(element, xmlFile));
        assertTrue(xmlFile.isFile());
        xmlFile.delete();
    }

    private static boolean saveDocument(Element element, File xmlFile) {
        boolean result = false;
        if (xmlFile == null || !xmlFile.isFile() || element == null) {
            return result;
        }

        // Rest of the code for the saveDocument method...
    }


Third case

@Test
public void testSaveDocument() throws Exception {
    // Create a temporary file for testing
    File xmlFile = File.createTempFile("test", ".xml");

    // Create a sample XML element to save
    DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
    Document doc = docBuilder.newDocument();
    Element rootElement = doc.createElement("root");
    doc.appendChild(rootElement);

    // Save the XML element to the temporary file
    boolean result = new IpaDataUpdate().saveDocument(xmlFile, rootElement);

    // Assert that the save operation was successful
    assertTrue(result);

    // Assert that the temporary file was created and is not empty
    assertTrue(xmlFile.exists());
    assertTrue(xmlFile.length() > 0);

    // Delete the temporary file
    xmlFile.delete();
}

full coverage check

 @Test
    void testConstructorNullUpdateData() {
        IpaDataUpdate update = new IpaDataUpdate(null);
        assertNotNull(update.updateData);
        assertTrue(update.updateData.isEmpty());
    }

    @Test
    void testConstructorNonNullUpdateData() {
        Map<String, Object> updateData = new HashMap<>();
        updateData.put("id1", new HashMap<>());
        updateData.put("id2", new HashMap<>());
        IpaDataUpdate update = new IpaDataUpdate(updateData);
        assertEquals(updateData, update.updateData);
    }

    @Test
    void testGetObject() {
        Map<String, Object> updateData = new HashMap<>();
        updateData.put("id1", new HashMap<>());
        updateData.put("id2", new HashMap<>());
        IpaDataUpdate update = new IpaDataUpdate(updateData);
        Object obj = update.getObject("id1");
        assertNotNull(obj);
        assertTrue(obj instanceof Map);
    }

    @Test
    void testAppendDataNewObject() {
        Map<String, Object> updateData = new HashMap<>();
        IpaDataUpdate update = new IpaDataUpdate(updateData);
        update.appendData("id1", "key1", "value1");
        assertTrue(updateData.containsKey("id1"));
        Map<String, Object> objData = (Map<String, Object>) updateData.get("id1");
        assertTrue(objData.containsKey("key1"));
        assertEquals("value1", objData.get("key1"));
    }

    @Test
    void testAppendDataExistingObject() {
        Map<String, Object> objData = new HashMap<>();
        objData.put("key1", "value1");
        Map<String, Object> updateData = new HashMap<>();
        updateData.put("id1", objData);
        IpaDataUpdate update = new IpaDataUpdate(updateData);
        update.appendData("id1", "key2", "value2");
        assertEquals(2, objData.size());
        assertTrue(objData.containsKey("key2"));
        assertEquals("value2", objData.get("key2"));
    }

    @Test
    void testUpdateAttribute() {
        Element element = new DocumentStub().createElement("test");
        element.setAttribute("key1", "oldValue");
        Map<String, Object> updateData = new HashMap<>();
        updateData.put("key1", "newValue");
        IpaDataUpdate update = new IpaDataUpdate(null);
        assertTrue(update.updateAttribute(element, "key1", updateData));
        assertEquals("newValue", element.getAttribute("key1"));
    }

    @Test
    void testUpdateAttributeNullElement() {
        Map<String, Object> updateData = new HashMap<>();
        updateData.put("key1", "newValue");
        IpaDataUpdate update = new IpaDataUpdate(null);
        assertFalse(update.updateAttribute(null, "key1", updateData));
    }

    @Test
    void testUpdateAttributeNullKey() {
        Element element = new DocumentStub().createElement("test");
        Map<String, Object> updateData = new HashMap<>();
        updateData.put("key1", "newValue");
        IpaDataUpdate update = new IpaDataUpdate(null);
        assertFalse(update.updateAttribute(element, null, updateData));
    }

 five attempt


 @Test
    public void saveDocumentTest() throws ParserConfigurationException, IOException, SAXException {
        // Arrange
        File xmlFile = new File("test.xml");
        xmlFile.createNewFile();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document document = documentBuilder.newDocument();
        Element rootElement = document.createElement("root");
        document.appendChild(rootElement);
        IpaDataUpdate ipaDataUpdate = new IpaDataUpdate();

        // Act
        boolean result = ipaDataUpdate.saveDocument(rootElement, xmlFile);

        // Assert
        assertTrue(result);
        assertTrue(xmlFile.isFile());

        // Cleanup
        xmlFile.delete();
    }

    @Test
    public void saveDocumentTestWithNullFile() throws ParserConfigurationException {
        // Arrange
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document document = documentBuilder.newDocument();
        Element rootElement = document.createElement("root");
        document.appendChild(rootElement);
        IpaDataUpdate ipaDataUpdate = new IpaDataUpdate();

        // Act
        boolean result = ipaDataUpdate.saveDocument(rootElement, null);

        // Assert
        assertFalse(result);
    }

    @Test
    public void saveDocumentTestWithNonExistentFile() throws ParserConfigurationException {
        // Arrange
        File xmlFile = new File("test.xml");
        xmlFile.delete();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document document = documentBuilder.newDocument();
        Element rootElement = document.createElement("root");
        document.appendChild(rootElement);
        IpaDataUpdate ipaDataUpdate = new IpaDataUpdate();

        // Act
        boolean result = ipaDataUpdate.saveDocument(rootElement, xmlFile);

        // Assert
        assertFalse(result);
    }

    @Test
    public void saveDocumentTestWithNullElement() throws ParserConfigurationException, IOException, SAXException {
        // Arrange
        File xmlFile = new File("test.xml");
        xmlFile.createNewFile();
        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
        Document document = documentBuilder.newDocument();
        IpaDataUpdate ipaDataUpdate = new IpaDataUpdate();

        // Act
        boolean result = ipaDataUpdate.saveDocument(null, xmlFile);

        // Assert
        assertFalse(result);

        // Cleanup
        xmlFile.delete();
    }
