public void isExistByEmailAndTenantId() throws Exception {
		
		AdminUserEntity adminuserEntity = getAdminUserEntity();
		WorkspaceEntity workspaceEntity = getWorkspcaeDTO();
		WorkspaceAdminApprovalEntity workspaceAdminApprovalEntity = getWorkspaceAdminApprovalEntity();
		AdminUserEntity adminUserEntity = getAdminUserEntity();
		ApLoginRequest apLoginRequest = new ApLoginRequest();
		apLoginRequest.setTenantId("42");
		apLoginRequest.setUserId("42");
		apLoginRequest.setUserName("janedoe");
		when(authService.isExistsByEmailId((String) any())).thenReturn(true);
		when(workspaceRepository.existsByTenantIdAndWsType((String) any(),(String) any())).thenReturn(true);

		when(workspaceRepository.findByTenantIdAndWsType((String) any(),(String) any())).thenReturn(workspaceEntity );
		when(adminRepository.findByEmailId((String) any())).thenReturn(adminuserEntity);
		when(workspaceApprovalRepository.findByAdminUserDTOAndWorkspaceDTO( any(),any())).thenReturn(workspaceAdminApprovalEntity);
		when(workspaceApprovalRepository.findByAdminUserDTOAndWorkspaceDTO(any(), eq(workspaceEntity)))
				.thenReturn(null);
		String workspacekey = workspaceEntity.getWorkspaceKey();;
		when(workspaceService.joinWorkspaceByKeyAP(eq("Yeruva"), any(), eq(null))).thenReturn(workspacekey);
		
		when(adminRepository.save(any())).thenReturn(adminUserEntity);
		doNothing().when(authService).updateAdminPassword(any(), eq("Yeruva120@gmail.com"));

//		when(authenticationManager.authenticate(any()))
//				.thenReturn(new UsernamePasswordAuthenticationToken("Yeruva120@gmail.com", "Yeruva120@gmail.com"));
		when(adminRepository.findByEmailId("2")).thenReturn(adminUserEntity);
		when(jwtSecretKey.secretKey())
				.thenReturn("securesecuresecuresecuresecuresecuresecuresecuresecuresecuresecuredev");
		when(authService.createAdminUserAp("nameUser", "5", "qwerty")).thenReturn(adminuserEntity);
	}
	
	
	----------------------------------------------------6-11-2022-----------------------------------------------------------
	@Test(expected = RuntimeException.class)
	public void loginAdminRemainingTest(){
		AdminUserEntity adminuserEntity = getAdminUserEntity();
		WorkspaceEntity workspaceEntity = getWorkspcaeDTO();
		ApLoginRequest apLogin =  getApLoginRequest();
		ApLoginRequest apl = Mockito.mock(ApLoginRequest.class);
		when(apl.getTenantId()).thenReturn(String.valueOf(Optional.of(apLogin)));
		assertThrows(RuntimeException.class, () -> {
			apLogin.getTenantId("2L");
		});

		when(workspaceRepository.findByTenantIdAndWsType("qwerty", BrityConstants.AP)).thenReturn(workspaceEntity);
		verify(workspaceRepository, times(1)).findByTenantIdAndWsType("qwerty", BrityConstants.AP);
		when(authService.isExistsByEmailId("5")).thenReturn(true);
		verify(authService, times(1)).isExistsByEmailId("5");
		
		when(authService.isExistsByEmailId(any())).thenReturn(Optional.of(adminuserEntity);
		AdminUserEntity isExistsByEmailId = adminuserEntity.getEmailId("5");
		assertNotNull(isExistsByEmailId );
		assertThat(isExistsByEmailId.getEmailId()).isEqualTo("5");
		
		
	}
	---------------------------------------------------------------------------------------------------------------------------------
	
	@Test(expected = RuntimeException.class)
	@DisplayName("if condition for tenantid")
	public void loginAdminRemainingTest(){
		WorkspaceAdminApprovalEntity workspaceApprovalDTO  = getWorkspaceAdminApprovalEntity();
		WorkspaceAdminApprovalEntity workspaceAdminApprovalEntity = getWorkspaceAdminApprovalEntity();
		AdminUserEntity adminuserEntity = getAdminUserEntity();
		WorkspaceEntity workspaceEntity = getWorkspcaeDTO();
		ApLoginRequest apLogin =  getApLoginRequest();
		ApLoginRequest apl = Mockito.mock(ApLoginRequest.class);
		when(apl.getTenantId()).thenReturn(String.valueOf(Optional.of(apLogin)));
		assertThrows(RuntimeException.class, () -> {
			apLogin.getTenantId("2L");
		});

		assertThrows(new Exception(), () ->{
			workspaceApprovalRepository
					.save(workspaceApprovalDTO);
		});

		assertThrows(NullPointerException.class, () -> adminuserEntity.getId(Long "233333"),"tenatd id is already mapped with user id go for direct login")  ;





		when(workspaceRepository.findByTenantIdAndWsType("qwerty", BrityConstants.AP)).thenReturn(workspaceEntity);
		verify(workspaceRepository, times(1)).findByTenantIdAndWsType("qwerty", BrityConstants.AP);
		when(authService.isExistsByEmailId("5")).thenReturn(true);
		verify(authService, times(1)).isExistsByEmailId("5");

		when(authService.isExistsByEmailId(any())).thenReturn(Optional.of(adminuserEntity);
		AdminUserEntity isExistsByEmailId = adminuserEntity.getEmailId("5");
		assertNotNull(adminuserEntity);
		assertNotNull(workspaceEntity);
		assertNull(workspaceAdminApprovalEntity);
		assertNull(workspaceEntity);

		assertEquals("5","5");

	}

	@Test
	public void validateApRequest() throws Exception {
		ApLoginRequest apLoginRequest = getApLoginRequest();
		ApLoginRequest apl = Mockito.mock(ApLoginRequest.class);
		when(apl.getTenantId()).thenReturn("1");
		ResponseEntity<Map<String, String>> result = apService.loginProvision(apLoginRequest);

		assertNull(result);
		exception.expect( RuntimeException.class);
		exception.expectMessage("failed to validate ap request");
	}

	@Test
	public void creatAdminTestRemaininf() throws Exception{
		WorkspaceEntity workspaceDto = getWorkspcaeDTO();
		ApCreateRequest apCreateRequest = getApCreateRequest();

		exception.expect(ResourceNotFoundException.class);
		exception.expectMessage("Data not found for workspace");
		Object webChatEntity = getWebChatEntity();
		assertNotNull(workspaceDto);



		when(authService.isExistsByEmailId("5")).thenReturn(true);
		when(authService.isExistsByEmailId("5")).thenReturn(false);
		ApResponse result = apService.createProvision(apCreateRequest);
		assertEquals("email id exists", result);
		assertNotNull(authService.isExistsByEmailId("5"));
		exception.expect(BadRequestException.class);
		exception.expectMessage("email id exists");
		verify(authService, times(2)).isExistsByEmailId("5");
		verify(authService, times(2)).isExistsByEmailId("5");
	}



	-------------------------------10-11-22------------------------------------------------------------------------
	@Test
	public void creatAdminTestRemaininf() throws Exception{
		WorkspaceEntity workspaceDto = getWorkspcaeDTO();
		ApCreateRequest apCreateRequest = getApCreateRequest();

		exception.expect(ResourceNotFoundException.class);
		exception.expectMessage("Data not found for workspace");
		Object webChatEntity = getWebChatEntity();
		assertNotNull(workspaceDto);



		when(authService.isExistsByEmailId("5")).thenReturn(true);
		when(authService.isExistsByEmailId("5")).thenReturn(false);
		ApResponse result = apService.createProvision(apCreateRequest);
		assertEquals("email id exists", result);
		assertNotNull(authService.isExistsByEmailId("5"));
		exception.expect(BadRequestException.class);
		exception.expectMessage("email id exists");
		verify(authService, times(2)).isExistsByEmailId("5");
		verify(authService, times(2)).isExistsByEmailId("5");
	}

	@Test
	public void test2() throws Exception {
		WorkspaceEntity workspaceEntity = getWorkspcaeDTO();
		Optional<WebChatEntity> webchatEntityy = Optional.of(getWebChatEntity());
		String workspacekey = workspaceEntity.getWorkspaceKey();
		WorkspaceAdminApprovalEntity workspaceAdminApprovalEntity = getWorkspaceAdminApprovalEntity();
		List<WorkspaceEntity> workspaceEntities = new ArrayList<>();
		workspaceEntities.add(workspaceEntity);
		when(workspaceApprovalRepository.save(any())).thenReturn(workspaceAdminApprovalEntity);
		when(workspaceService.joinWorkspaceByKeyAP(eq("Yeruva"), any(), eq(null))).thenReturn(workspacekey);
		verify(workspaceService, times(1)).joinWorkspaceByKeyAP(eq("Yeruva"), any(), eq(null));
		verify(workspaceApprovalRepository, times(1)).findByAdminUserDTOAndWorkspaceDTO(any(), eq(workspaceEntity));
		when(workspaceService.joinWorkspaceByKeyAP(eq("Yeruva"), any(), eq(null))).thenThrow(Exception.class);
		assertThrows(Exception.class, () -> workspaceService.joinWorkspaceByKeyAP(eq("Yeruva"), any(), eq(null)));


	}

	@Test
	public void test3(){
		WorkspaceEntity workspaceDto = getWorkspcaeDTO();
		ApCreateRequest apCreateRequest = getApCreateRequest();
		when(authService.isExistsByEmailId("5")).thenReturn(true);
		when(authService.isExistsByEmailId("5")).thenReturn(false);
		ApResponse result = apService.createProvision(apCreateRequest);
		assertEquals("email id exists", result);
		assertNotNull(authService.isExistsByEmailId("5"));
		exception.expect(BadRequestException.class);
		exception.expectMessage("email id exists");
		verify(authService, times(2)).isExistsByEmailId("5");
		verify(authService, times(2)).isExistsByEmailId("5");
		when(authService.isExistsByEmailId("5")).thenThrow(RuntimeException.class);
		assertThrows(BadRequestException.class, () -> authService.isExistsByEmailId("5"));


	}



	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
